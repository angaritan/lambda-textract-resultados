AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: may-lmd-clients-loadimg-into-S3-pj  
Parameters:
  PositiveS3OutBucketName:
    Type: String
    Description: Nombre del bucket para los archivos resultado procesados positivo
    Default: ""  
  PolicyBoundary:
    Type: String
    Description: Valor del permission boundary para la creacion de roles
    Default: ""
  VPCApiMayorista:
    Type: String
    Description: VPC ApiMayorista para conexion a internet
  subNet1:
    Type: String
    Description: SubNet ApiMayorista para conexion a internet
    Default: ""
  subNet2:
    Type: String
    Description: SubNet ApiMayorista para conexion a internet
    Default: ""
  securityVPC:
    Type: String
    Description: Grupo de seguridad de ApiMayorista para conexion a internet
  pKMSKeyID:
    Type: String
    Description: Llave kms para el manejo de encriptación.
  routeTableId:
    Type: String
    Description: Id de la ruta de la tabla ApiMayorista para conexion a internet
    Default: ""    

Resources:
  MayLmdClientsLoadimgIntoS3Pj:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    #checkov:skip=CKV_AWS_116:No need for DLQ on this Lambda.    
    #checkov:skip=CKV_AWS_115:The concurrency is not defined yet.
    Properties:
      FunctionName: may-lmd-clients-loadimg-into-S3-pj
      CodeUri: src/
      Handler: handler/textractLoadTxt.handler
      Runtime: nodejs20.x
      Role: !GetAtt MayLmdClientsLoadimgIntoS3PjRole.Arn
      MemorySize: 512
      Timeout: 120
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      PackageType: Zip
      SnapStart:
        ApplyOn: None
      VpcConfig:
        SecurityGroupIds:
        - !Sub ${securityVPC}
        SubnetIds:
        - !Sub ${subNet1}
        - !Sub ${subNet2}
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto      
      Architectures:
        - x86_64

   # Rol de may-lmd-clients-loadimg-into-S3-pj  
  MayLmdClientsLoadimgIntoS3PjRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: may-lmd-clients-loadimg-into-S3-pjRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - textract.amazonaws.com
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Description: "Rol que va a asumir la Lambda may-lmd-clients-loadimg-into-S3-pj"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      PermissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${PolicyBoundary}'
      Path: '/dev/'
      Policies:
        - PolicyName: S3AccBucketOutFromLoadingIntoPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Sid: S3BucketAccessOutPermissions
              Effect: Allow
              Action:
              - s3:GetObject
              - s3:PutObject                                  
              Resource:
              - !Sub 'arn:aws:s3:::${PositiveS3OutBucketName}/*'
            - Sid: KMSDecryptPermissions
              Effect: Allow
              Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey
              Resource:
              - !Ref pKMSKeyID
        - PolicyName: GetTextractSQSOutLoadingIntoPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes              
              - sqs:GetQueueUrl
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey
              Resource:
              - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:SQSTextractTxtSalida.fifo'
              - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:SQSTextractTxtSalida-dlq.fifo'
        - PolicyName: LMPermLoadimgS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
              - textract:GetDocumentAnalysis
              - textract:GetDocumentTextDetection                      
              Resource: "*"
        - PolicyName: GetParametersTextractLoadImgPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
              - ssm:GetParametersByPath
              - ssm:GetParameters
              - ssm:GetParameter
              Resource:
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/textract-load/configuration/*'
 
  #Subscripcion lambda a Topico de SNS
  rSNSSubscriptionToTextractSalidaSQS:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:amazontextract-sns-standard-topic                  
      Endpoint: !GetAtt MayLmdClientsLoadimgIntoS3Pj.Arn
      Protocol: lambda

  # Permiso para SQS invocar may-lmd-clients-procimg-texttract-pj
  SNSPermProcimgTextract:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MayLmdClientsLoadimgIntoS3Pj
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:amazontextract-sns-standard-topic      

  # VPC Endpoint
  SQSEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Sub ${VPCApiMayorista}
      ServiceName: com.amazonaws.us-east-1.sqs
      VpcEndpointType: Interface
      SubnetIds:
      - !Sub ${subNet1}
      - !Sub ${subNet2}
      SecurityGroupIds:
      - !Sub ${securityVPC}

  TextractEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Sub ${VPCApiMayorista}
      ServiceName: com.amazonaws.us-east-1.textract
      VpcEndpointType: Interface
      SubnetIds:
      - !Sub ${subNet1}
      - !Sub ${subNet2}
      SecurityGroupIds:
      - !Sub ${securityVPC}

  SNSEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Sub ${VPCApiMayorista}
      ServiceName: com.amazonaws.us-east-1.sns
      VpcEndpointType: Interface
      SubnetIds:
      - !Sub ${subNet1}
      - !Sub ${subNet2}
      SecurityGroupIds:
      - !Sub ${securityVPC}

  pUrlSQSTExtracSalida:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /textract-load/configuration/aws.sqs.salida-textract-proc.url
      Type: String
      Value: !Sub https://sqs.us-east-1.amazonaws.com/${AWS::AccountId}/SQSTextractTxtSalida.fifo
      Description: Url para la conexión con el SQS SQSTextractTxtSalida.fifo.
   
  pPositiveS3OutBucketName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /textract-load/configuration/aws.s3.bucket-salida-textract
      Type: String
      Value: !Sub ${PositiveS3OutBucketName}
      Description: Nombre del bucket S3 donde se carga archivo txt procesado resultado.
 
  pUrlSQSTExtracSalidaDLQ:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /textract-load/configuration/aws.sqs.salida-textract-dlq-proc.url
      Type: String
      Value: !Sub https://sqs.us-east-1.amazonaws.com/${AWS::AccountId}/SQSTextractTxtSalida-dlq.fifo
      Description: Url para la conexión con el SQS SQSTextractTxtSalida-dlq.fifo salida.

  pRoleEjecucionArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /textract-load/configuration/aws.rol.role-ejecucion
      Type: String
      Value: !GetAtt MayLmdClientsLoadimgIntoS3PjRole.Arn
      Description: Rol de ejcucion desde lambda de salida  

Outputs:
  LambdaFunctionArn:
    Description: "Lambda procesa resultados en un formato txt resultado de textract adicion permisos itau-permission"
    Value: !GetAtt MayLmdClientsLoadimgIntoS3Pj.Arn